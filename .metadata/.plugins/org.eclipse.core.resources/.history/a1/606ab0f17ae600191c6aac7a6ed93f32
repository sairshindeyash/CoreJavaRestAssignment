package com.example.web;

import static org.hamcrest.Matchers.hasSize;
/*import static org.junit.Assert.assertThat;*/
import static org.junit.Assert.*;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import com.example.controller.MovieController;
import com.example.demo.SbJunitApplication;
import com.example.entity.Movie;
import com.example.service.MovieService;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = SbJunitApplication.class)
@SpringBootTest
public class MovieControllerTest {

	@InjectMocks
	private MovieController movieController;

	@Mock
	MovieService movieService;
	
	@Test
	public void testAddEmployee() 
	{
		MockHttpServletRequest request = new MockHttpServletRequest();
		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));
		
		Movie movie = new Movie();
		movie.setId(1);
		when(movieService.addMovie(any(Movie.class))).thenReturn(movie);
		
		Movie movieToAdd = new Movie("gravity", "science");
		ResponseEntity<Movie> responseEntity = movieController.saveToDo(movieToAdd);
		
		
		assertThat(responseEntity.getStatusCodeValue()).isEqualTo(201);
		assertThat(responseEntity.getHeaders().getLocation().getPath()).isEqualTo("/1");
		
		assertThat(responseEntity.getStatusCodeValue());
	}
}
